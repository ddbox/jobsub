#!/bin/env python
# $Id$

from groupsettings import JobSettings, MinervaSettings, NovaSettings
from groupsettings import CdfSettings, MinosSettings
import getopt
import sys
import os
import datetime
import commands
import pprint
import subprocess
import shlex


def motd():

    #motd_file = "/grid/fermiapp/common/jobsub_MOTD/MOTD"
    motd_filename = settings.settings["motd_file"]
    #downtime_file = "/grid/fermiapp/common/jobsub_MOTD/JOBSUB_UNAVAILABLE"
    downtime_filename = settings.settings["downtime_file"]
    if os.path.isfile(motd_filename):
        motd_file = open(motd_filename)
        print motd_file.read()
        motd_file.close()

    if os.path.isfile(downtime_filename):
        dtf = open(downtime_filename)
        print dtf.read()
        dtf.close()
        sys.exit(0)


def iterArgs():

    experiment_env = os.environ.get("GROUP")
    if experiment_env == "e938" or experiment_env == "minerva":
        job_settings = MinervaSettings()
    elif experiment_env == "nova":
        job_settings = NovaSettings()
    elif experiment_env == "e875" or experiment_env == "minos":
        job_settings = MinosSettings()
    elif experiment_env == "cdf" or experiment_env == "cdf":
        job_settings = CdfSettings()
    else:
        job_settings = JobSettings()

    # print "job_settings class is %s"%job_settings.__class__.__name__

    job_settings.runCmdParser()

    return job_settings



def munge_jdf(condor_jdf,settings):
    files = ",".join(os.listdir("."))
    transfer_files = "transfer_input_files = %s" % files
    if settings['transfer_input_files']:
        transfer_files = "%s,%s" % (transfer_files, settings['transfer_input_files'])
    orig_name = condor_jdf + ".orig"
    os.rename(condor_jdf, orig_name)
    fin = open(orig_name, "r")
    fout = open(condor_jdf, "w")
    for line in fin:
        if  'queue' in line:
            fout.write("%s\n" % transfer_files)
        fout.write("%s" % line)
    fin.close()
    fout.close()

def createSubmitCmd(settings):
    if settings.get('dagfile'):
        dag_jdf = os.path.basename(settings['dagfile']) + ".condor.sub"
        if os.path.exists(dag_jdf):
            return
    exports = ""
    for x in settings['added_environment']:
        # if x.find("$ENV(")>0:
        #(var,val) = x.split('=')
        var = x
        val = os.environ.get(var)
        if val is not None:
            if settings['ups_shell'] == "csh":
                exports = exports + """setenv %s '%s'; """ % (var, val)
            else:
                exports = exports + """export %s="%s";""" % (var, val)
    cmd = ""
    remote_schedd = False
    local_schedd_name = ""
    if settings.has_key('schedd') and settings['schedd'] is not None:
        parts = settings['schedd'].split('@')
        if parts[-1] == settings['submit_host']:
            schedd_spec = "-name %s " % settings['schedd']
            if parts[0] != parts[-1]:
                local_schedd_name = parts[0]
        else:
            schedd_spec = "-remote %s " % settings['schedd']
            remote_schedd = True
    else:
        schedd_spec = ""

    os.chdir(settings['condor_tmp'])
    if not settings['usedagman']:
        cmd = "condor_submit %s  %s" % (schedd_spec,
                                        settings['cmdfile'])
        settings['condor_submit_cmd'] = cmd
    else:
        append = ""
        frag = open("dag.sub.frag","a")
        for itm  in settings['lines']:
            itm = itm.replace("\\","")
            itm = itm.replace("'",'')
            itm = itm.replace(" = ","=")
            itm = itm.strip()
            itm = itm.replace('\r','').replace('\n','')
            frag.write("%s\n" % itm)
        frag.close()

        cmd = "sort -u dag.sub.frag -o dag.frag"
        commands.getstatusoutput(cmd)

        if settings.has_key('maxConcurrent'):
            maxjobs = settings['maxConcurrent']
        else:
            maxjobs = 2000
        if local_schedd_name:
            cmd1 = "condor_config_val SCHEDD.%s.SCHEDD_ADDRESS_FILE" % local_schedd_name
            cmd2 = "condor_config_val SCHEDD.%s.SCHEDD_DAEMON_AD_FILE" % local_schedd_name
            (retVal, addr_file) = commands.getstatusoutput(cmd1)
            (retVal, daemon_file) = commands.getstatusoutput(cmd2)
            add_spec = " -schedd-address-file %s  -schedd-daemon-ad-file %s" % (addr_file, daemon_file)
        else:
            add_spec = ""
        cmd = "condor_submit_dag  %s -no_submit -dont_suppress_notification " % add_spec
        cmd += "-insert_sub_file dag.frag -maxidle %s -maxjobs %s %s %s" %\
            (settings['job_count'], maxjobs, append, os.path.basename(settings['dagfile']))

        #print 'jobsub executing %s' % cmd
        (retVal, output) = commands.getstatusoutput(cmd)
        dag_jdf = os.path.basename(settings['dagfile']) + ".condor.sub"

        if settings['verbose'] or retVal:
            print output
        else:
            print dag_jdf

        if remote_schedd:
            munge_jdf(dag_jdf,settings)
        cmd = "condor_submit %s %s" % (schedd_spec, dag_jdf)
        settings['condor_submit_cmd'] = cmd
        if retVal != 0:
            retVal = retVal % 256
            if retVal == 0:
                retVal = 1
                sys.exit(retVal)


def doSubmit(settings):
    print 'submitting....'
    cmd = settings['condor_submit_cmd']
    if settings['verbose']:
        print "doSubmit: executing %s " % cmd

    (retVal, output) = commands.getstatusoutput(cmd)
    print output
    if retVal != 0:
        retVal = retVal % 256
        if retVal == 0:
            retVal = 1
        print "%s returned status %s " % (cmd, retVal)
        print "additional output: %s " % (output)
        print "if you need help with the above errors "
        print "please open a service desk ticket"

    sys.exit(retVal)

if __name__ == "__main__":
    try:
        a = shlex.split(' '.join(sys.argv))
        sys.argv = a
    except:
        pass
    notAllowed = ['>', '<', '-', '+', '=']
    for arg in sys.argv:
        if arg == '--show-parsing':
            print "jobsub parsed input arguments as:%s" % sys.argv
            sys.exit(0)
        if arg in notAllowed:
            print "parsing error detected in arg list:%s" % sys.argv
            print "this is probably caused by improper quoting"
            print "try re-grouping arguments with \\\" (escaped quotes) or single quotes "
            print "use the --show-parsing option to show how your arguments are  parsed and exit without submitting"
            print "exiting"
            sys.exit(1)

    try:
        settings = iterArgs()
    except Exception, e:
        print str(e)
        sys.exit(1)
    # settings.checkSanity()
    settings.makeCondorFiles()
    createSubmitCmd(settings.settings)
    if settings.settings['verbose'] == True:
        pp = pprint.PrettyPrinter(indent=4)
        pp.pprint(settings.settings)
                

    if settings.settings['submit']:
        motd()
        doSubmit(settings.settings)
