#!/usr/bin/env python

################################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
################################################################################

import sys
import os
import getopt
import optparse
import time
import traceback

import constants
import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientSubmissionError
from jobsubClient import version_string
from jobsubClient import version_string
from jobsubClient import http_code_to_rc
from defaultServer import defaultServer


def split_client_server_args(parser, argv):
    cli_argv = [argv[0]]
    srv_argv = []

    i = 1
    while (i < len(sys.argv)):

        opt = parser.get_option(argv[i])

        if opt:
            cli_argv.append(argv[i])
            if opt.action in optparse.Option.TYPED_ACTIONS:
                try:
                    cli_argv.append(argv[i+1])
                    i += 1
                except IndexError:
                    parser.error('%s option requires an argument' % argv[i])
        elif '=' in argv[i]:
            # Check if the arg splitter is '=' example --foo=bar
            opt = parser.get_option(argv[i].split('=')[0])
            if opt:
                cli_argv.append(argv[i])
            else:
                srv_argv.append(argv[i])
        else:
            srv_argv.append(argv[i])

        i += 1

    return (cli_argv, srv_argv)


def required_args_present(options):
    try:
        if options.debug and options.jobid_output_only:
            print "ERROR: --debug and --jobid_output_only are incompatible"
            return False
        if (options.acctGroup and options.jobsubServer):
            return True
    except AttributeError:
        return False
    return False


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


"""
def parse_server_args(option, opt_str, value, parser):
     assert value is None
     value = []

     def floatable(str):
         try:
             float(str)
             return True
         except ValueError:
             return False

     for arg in parser.rargs:
         ## stop on --foo like options
         #if arg[:2] == "--" and len(arg) > 2:
         #    break
         ## stop on -a, but not on -3 or -3.0
         #if arg[:1] == "-" and len(arg) > 1 and not floatable(arg):
         #    break
         value.append(arg)

     del parser.rargs[:len(value)]
     setattr(parser.values, option.dest, value)
"""

def parse_opts(argv):
    usage = '%prog [Client Options] [Server Options] user_script [user_script_args]\n\nProvide --group and --jobsub-server to see full help'
    parser = optparse.OptionParser(usage=usage,
                                   version=version_string(),
                                   add_help_option=False,
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are (--group AND file://[dag_description_file]).   Please direct questions,  comments, and problems to the service desk")

    opt_group = optparse.OptionGroup(parser, "Client Options")

    # Required args
    opt_group.add_option('-G', '--group',
                         dest='acctGroup',
                         type='string',
                         action='store',
                         default=os.environ.get('JOBSUB_GROUP'),
                         metavar='<Group/Experiment/Subgroup>',
                         help='Group/Experiment/Subgroup for priorities and accounting')

    # Optional args
    opt_group.add_option('--role',
                         dest='acctRole',
                         type='string',
                         action='store',
                         metavar='<VOMS Role>',
                         default=None,
                         help='VOMS Role for priorities and accounting')


    opt_group.add_option('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    opt_group.add_option('--dropbox-server',
                         dest='dropboxServer',
                         action='store',
                         metavar='<Dropbox Server>',
                         default=None,
                         help='Alternate location of Dropbox server to use')

    opt_group.add_option('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages including server contacted, http response, response time')

    opt_group.add_option('--jobid-output-only',
                         dest='jobid_output_only',
                         action='store_true',
                         default=False,
                         help='Return only jobsub jobid in response to a successful submission')

    opt_group.add_option('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')



    parser.add_option_group(opt_group)

    if len(argv) < 1:
        print "ERROR: Insufficient arguments specified"
        parser.print_help()
        sys.exit(1)

    cli_argv, srv_argv = split_client_server_args(parser, argv)

    options, remainder = parser.parse_args(cli_argv)

    if len(remainder) > 1:
        parser.print_help(file)

    if not srv_argv:
        # No server side args or exe provided. Just print help.
        options.help = True

    if options.help:
        parser.print_help()
        if required_args_present(options):
            header = "  Server Options:"
            print '\n%s' % header
            print_acctgroup_help(options)
        sys.exit(0)

    if not required_args_present(options):
        print "ERROR: Missing required arguments"
        print "%s" % parser.epilog
        parser.print_help()
        sys.exit(1)
    return (options, srv_argv)


def print_acctgroup_help(options):
    """
    Format and print the help message from the server
    """

    js_client = JobSubClient(options.jobsubServer, options.acctGroup, None, [], extra_opts={})
    response = js_client.help('dag')

    out = response.get('out')

    # Remove the duplicate lines from the server response
    #    --help message 
    #    Options:
    for lineno in range(len(out)):
        if out[lineno].lstrip().startswith('-h, --help') or (out[lineno].strip() == 'Options:'):
            out[lineno] = ''
            break
    help_str = '  '.join(out[4:])
    print help_str


def main(argv):
    options, srv_argv = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('SERVER_ARGS: ', srv_argv)
    logSupport.dprint('CLIENT_ARGS: ', options)
    js_client = JobSubClient(options.jobsubServer, options.acctGroup,
                             options.acctRole, srv_argv,
                             options.dropboxServer, useDag=True,
                             extra_opts={'debug':options.debug,
                                         'jobid_output_only':options.jobid_output_only})
    rc = 1
    try:
        http_code = js_client.submit_dag()
        rc = http_code_to_rc(http_code)
    except JobSubClientSubmissionError, e:
        print e
        logSupport.dprint(traceback.format_exc())
    except Exception, e:
        print e
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))

# TO TEST RUN SOMETHING LIKE THE FOLLOWING

# X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --group nova --jobsub-server https://fermicloud326.fnal.gov:8443 -g -N 3 --site Fermicloud-MultiSlots parag_test.sh --job-args 100

### Following are old examples
# X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443 --job-exe parag_test.sh --job-args 100 --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots
#X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443 --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots --X509_USER_PROXY=/scratch/proxies/dbox/dbox.nova.proxy /scratch/app/users/condor-exec/dbox/test_grid_env.sh 100
